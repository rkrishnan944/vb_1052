#!/usr/bin/env python

# ROS Node - Action Client - IoT ROS Bridge

import rospy
import actionlib

# Message Class that is used by ROS Actions internally
from pkg_task1.msg import msgTurtleAction
# Message Class that is used for Goal Messages
from pkg_task1.msg import msgTurtleGoal
# Message Class that is used for Result Messages
from pkg_task1.msg import msgTurtleResult

# Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotAction
# Message Class that is used for Goal Messages
from pkg_ros_iot_bridge.msg import msgRosIotGoal
# Message Class that is used for Result Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult

from pkg_ros_iot_bridge.msg import msgMqttSub


def trace_hexagon():

    #print("yaha tk aa chuka hai")
    simple_action_client = IotRosBridgeActionClient()
    action_client = IotRosBridgeActionClient()
    
    goal_handle1 = simple_action_client.send_goal(2, 0)
    action_client._goal_handles['1'] = goal_handle1
    rospy.sleep(5)
    
    goal_handle2 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['2'] = goal_handle2
    rospy.sleep(5)
    
    goal_handle3 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['3'] = goal_handle3
    rospy.sleep(5)


    goal_handle4 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['4'] = goal_handle4
    rospy.sleep(5)


    goal_handle5 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['5'] = goal_handle5
    rospy.sleep(5)

    goal_handle6 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['6'] = goal_handle6
    rospy.sleep(5)

    goal_handle7 = simple_action_client.send_goal(2, 60)
    action_client._goal_handles['7'] = goal_handle7
    rospy.sleep(5)


class IotRosBridgeActionClient:

    # Constructor
    def __init__(self):

        # Initialize Action Client
        self._sac = actionlib.SimpleActionClient('/action_turtle',
                                                 msgTurtleAction)
        self._ac = actionlib.ActionClient('/action_iot_ros',
                                          msgRosIotAction)
        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        # Store the MQTT Topic on which to Publish in a variable
        #param_config_iot = rospy.get_param('config_iot')
        #self._config_mqtt_pub_topic = param_config_iot['mqtt']['topic_pub']

        # Wait for Action Server that will use the action - '/action_iot_ros'
        # to start
        param_config_iot = rospy.get_param('config_iot')
        self._config_mqtt_pub_topic = param_config_iot['mqtt']['topic_pub']
        self._sac.wait_for_server()
        self._ac.wait_for_server()
        rospy.loginfo("Action server up, we can send goals.")

    def msg_callback(self, mssg):

        if mssg.message == "start":
            trace_hexagon()

        else:
            print("Kuch error hua hai")

    # This function will be called when there is a change of state in the
    # Action Client State Machine

    def on_transition(self, goal_handle):

        # from on_goal() to on_transition(). goal_handle generated by
        # send_goal() is used here.

        result = msgTurtleResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo(
            "Transition Callback. Client Goal Handle #: " +
            str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            #get_result()  # gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)

            if (result.flag_success):
                rospy.loginfo(
                    "Goal successfully completed. Client Goal Handle #: " +
                    str(index))
            else:
                rospy.loginfo(
                    "Goal failed. Client Goal Handle #: " +
                    str(index))

    # This function is used to send Goals to Action Server

    def send_goal(self, arg_dis, arg_angle):
        # Create a Goal Message object
        goal = msgTurtleGoal(distance=arg_dis, angle=arg_angle)
        '''
        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message
        '''
        rospy.loginfo("Send goal.")

        # self.on_transition - It is a function pointer to a function which will be called when
        # there is a change of state in the Action Client State Machine
        goal_handle = self._sac.send_goal(goal,
                                          None,
                                          None)

        return goal_handle

    def send_data_to_mqtt(self, arg_protocol, arg_mode, arg_topic, arg_message):

    	goal = msgRosIotGoal()

        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message

        rospy.loginfo("Send goal.")
        
        # self.on_transition - It is a function pointer to a function which will be called when 
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._ac.send_goal(goal,
                                         self.on_transition,
                                         None)

        return goal_handle


# Main
def main():
    rospy.init_node('node_iot_ros_bridge_action_client')
    simple_action_client = IotRosBridgeActionClient()
    rospy.Subscriber(
        "/ros_iot_bridge/mqtt/sub",
        msgMqttSub,
        simple_action_client.msg_callback)
    
    action_client = IotRosBridgeActionClient()
   

    # rospy.sleep(1.0)
    # goal_handle1.cancel()

    rospy.spin()


if __name__ == '__main__':
    main()
